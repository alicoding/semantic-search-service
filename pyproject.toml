[tool.poetry]
name = "semantic-search-service"
version = "1.0.0"
description = "Production-ready semantic search service using pure LlamaIndex with native persistence"
authors = ["Ali Al Dallal <ali@alicoding.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "src"}]
keywords = ["semantic-search", "llama-index", "vector-search", "qdrant", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
repository = "https://github.com/alicoding/semantic-search-service"
homepage = "https://github.com/alicoding/semantic-search-service"
documentation = "https://github.com/alicoding/semantic-search-service/blob/main/README.md"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.10,<3.14"

# REQUIRED - No fallbacks, no mocks
# Core LlamaIndex
llama-index-core = "^0.13.3"
llama-index-embeddings-openai = "^0.5.0"
llama-index-llms-openai = "^0.5.4"
llama-index-vector-stores-qdrant = "^0.8.1"

# Vector database
qdrant-client = "^1.15.1"

# HTTP client (NOT requests)
httpx = "^0.28.0"

# Data validation (NOT manual)
pydantic = "^2.8.0"

# CLI interface (NOT argparse)  
typer = "^0.15.0"

# Beautiful output (NOT print)
rich = "^13.0.0"

# Logging (NOT logging)
loguru = "^0.7.0"

# Environment variables
python-dotenv = "^1.0.0"

# FastAPI for REST API (following VISION.md)
fastapi = "^0.100.0"
uvicorn = "^0.23.0"

# MCP server support
fastmcp = "^2.11.3"
llama-index-storage-docstore-redis = "^0.4.0"
llama-index-llms-openai-like = "^0.5.0"

[tool.poetry.group.dev.dependencies]
# Development dependencies
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
ruff = "^0.1.0"
mypy = "^1.0.0"
coverage = "^7.0.0"

[tool.poetry.extras]
# MCP server integration  
mcp = ["fastmcp"]

# Temporal workflow integration
temporal = ["temporalio"]

# Alternative embedding providers
providers = ["openai", "sentence-transformers"]


[tool.poetry.dependencies.temporalio]
version = "^1.5.0"
optional = true

[tool.poetry.scripts]
semantic-search = "src.integrations.cli:app"


[tool.black]
line-length = 100
target-version = ['py310']

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["code_intelligence"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]